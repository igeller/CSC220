-1. Go to box.miami.edu and make sure you see the version of prog05
   you meant to turn in this morning.  If not, send email to
   vjm@cs.miami.edu right away.

0. Create package prog06 and copy MaintainQueue.java into it.

1. Run MaintainQueue and make sure you know how it works.  It won't
   print the list of names in the queue until you implement toString
   in the next step.  Add a few people, peek, remove, etc.  What
   happens when you peek at an empty queue?

2. Implement toString in MaintainQueue.  Visit the elements of
   customers using the new kind of for loop and append them to a
   single String separated by new-line ("\n").  Test.

3. In ArrayQueue.java, read and understand offer and peek.  This means
   that you are ready to write either of them on the quiz.  Implement
   poll.  Test using MaintainQueue.  Read and understand the
   definition of the Iter class.

4. In LinkedQueue.java, read and understand offer and peek.  Implement
   poll.  Implement hasNext() and next() in the Iter class. Unlike
   ArrayQueue.Iter, it needs only one variable to keep track of the
   next node to be visited.  Test using MaintainQueue.

5. Create a class WordStep.  In the main method, create a new WordStep
   and store it in game.  Ask the user for a starting word and a
   target word.  Ask if the human or the computer should play:

    String[] commands = { "Human plays.", "Computer plays." };

   Call game.play or game.solve with the starting word and the target
   word.  (solve will empty for now.)

   In play, do the following forever (until the return occurs).  Tell
   the user the current word (the start) and the target word.  Ask for
   the next word.  Set the start word variable to that next word.  If
   it equals the target, tell the user ``You win!'' and return.
   Otherwise keep looping.  Test.

6. Create a static boolean method oneLetter which takes two String as
   input and returns true if they have the same length and differ in
   exactly one character.

   Modify play so that it calls oneLetter.  It should warn the user
   and NOT change the current (start) word variable if the word that
   the user suggests is not one letter away from the current start
   word.  Test.  You still will be able to use nonsense words.

7. In main, just after creating the new WordStep in main, ask the user
   for the name of a dictionary file and call game.loadDictionary(filename).
   Add a private static Node class to WordStep with a String word and
   a previous, but NOT a next.  Add a List<Node> nodes to WordStep
   initialized to an ArrayList<Node>.  For each word in the dictionary
   file, loadDictionary should read in the word, create a Node from
   it, and add this Node to nodes.

   Write a find method that finds a word in words.  It should return
   the Node or null if not there.  Modify main to check that the start
   and target words are in the dictionary (in nodes).  Modify play so
   it also refuses a word not in the dictionary.  Test using the
   dictionary file called words in the prog06 directory.

HOMEWORK

8. Modify reallocate() in ArrayQueue to use System.arraycopy.
   Sometimes it has to call it twice.  Test.  Make sure you add enough
   entries when you run MaintainQueue to trigger reallocate().  To
   test set labReallocate to false.  Make sure you do tests with
   front < back    and with   front > back.

9. Modify ArrayQueue.Iter to using a single index variable and no
   count variable.  If the queue is empty, then the constructor should
   set index=-1.  If index==back, then next() should set index=-1.
   Test by setting labIterator to false.

10. Now to implement WordStep.solve.  Inside solve, create a Queue of
   Node.  Find the node belonging to the start word and put it into
   the queue.  Also save it in a variable since you will need to refer
   to it again later.

   While the queue is not empty, remove a node, and call it theNode.
   Go through the list of nodes and look for nodes which aren't the
   start node, don't have previous set yet, and are one letter
   different from theNode.  For each one you find, call it nextNode.
   Set its previous to theNode and add it to the queue.

   If the word in nextNode is the target, then report success.  To get
   the solution in reverse order, follow previous back to the start
   node.  Display the solution in forward order.
