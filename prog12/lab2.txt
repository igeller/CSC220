0. Download Main2.java that calls Tinge2 into your prog12 folder.

   If you don't have page.dir and word.dir in your project folder,
   then you didn't finish the homework due at 11am.  Did you forget to
   write out your "hard disks"?  That should be the last line in your
   gather.

   Delete page.dir and word.dir.  Download search.zip into your
   project folder and unzip it to create a new word.dir and page.dir.


1. Create Tinge2 which implements SearchEngine.  The gather method
   should just call PageTrie read and WordTable read to read in the
   page.dir and word.dir you have just unzipped.


2. (Inside Tinge2) create a PageComparator class that you can pass to
   the PriorityQueue of matching page indices.  What type does it
   compare?  How does it compare them?


3. In search, you need three variables

    // Iterator into list of page ids for each key word.
    Iterator<Long>[] wordFileIterators =
      (Iterator<Long>[]) new Iterator[keyWords.size()];
    
    // Current page index in each list, just ``behind'' the iterator.
    long[] currentPageIndices;
    
    // LEAST popular page is at top of heap so if heap has numResults
    // elements and the next match is better than the least popular page
    // in the queue, the least popular page can be thrown away.

    PriorityQueue<Long> bestPageIndices;

   Write a loop to initialize the entries of wordFileIterators.  If any
   of the words do not have an index ("sqrglwtzs"), what should you do?
    

4. Implement the following methods

  /** If all the currentPageIndices are the same (because are just
      starting or just found a match), get the next page index for
      each word: call next() for each word file iterator and put the
      result into current page indices.

      If they are not all the same, only get the next index if the
      current index is smaller than the largest.

      Return false if hasNext() is false for any iterator.

      @param currentPageIndices array of current page indices
      @param wordFileIterators array of iterators with next page indices
      @return true if all minimum page indices updates, false otherwise
  */
  private boolean getNextIndices
    (long[] currentPageIndices, Iterator<Long>[] wordFileIterators) {


  /** Check if all elements in an array are equal.
      @param array an array of numbers
      @return true if all are equal, false otherwise
  */
  private boolean allEqual (long[] array) {


5. Implement the loop of search.  While getNextIndices is successful,
   check if the entries of currentPageIndices are all equal.  If so, you
   have a found a match, so save it in the queue.


6. Create an array of String which will hold the results.  How big
   should it be?

   Unload the priority queue into the string.  But polling the queue
   gives you the pages in reverse order from least significant to
   most significant.  What should you do?


7. Test your program.  Each page is named after an integer and
   contains all the multiples of that integer less than 100.  (See
   search.txt) For example, when you search for 2 3 5 you should get
   30.html, 60.html, and 90.html (in that order).









































